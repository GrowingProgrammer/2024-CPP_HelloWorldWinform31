<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAPADAADwAwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICMAIB8jACAf
        IwAgHyMAIB8jAiAfIwMgHyMCIB8jASAfIwAgHyMAIB8jACAfIwAgHyMBIB8jAiAfIwMgHyMDIB8jAiAf
        IwEgHyMAIB8jACAfIwAgHyMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAf
        IwAgHyMAIB8jASEgJAIeHSEAHRwgABIRFwAgHyMAHRwhAB8eIgEhICQER0ZJAgAAAAAAAAAA0dHRAMLB
        wgAAAAAAAAAAAEA/QwIgHyMEIB8jAR4dIQAgHyMAIB8jASAfIwEgHyMAIB8jACAfIwAgHyMAIR8jAAAA
        AAAAAAAAIB8jAAAAAABCQEgAEBASAQAAACUBAQI5GxoeKiYlKQgdHB8CKCgrAQAAAAAAAAAAAAAADAAA
        ACYAAAA3AAAAOQAAACoAAAAOAAAAAAAAAAAtLDABKCcrBGZlaAL///8Ab25wACQiJgEgHyMCISAjACAe
        IwAgHyMAAAAAAAAAAAAgHyMA////AAAAAAAbGh6fWFda/2xsbvwnJir/Hh0hjxUUFwAFBgQTAQACaiAf
        I7xFREfpYF9i/W9vcf9ycXT/ZGNm/kZFSesdHCC5AAAAXwUGAgoAAAAAIiIiAAAAAAFISEoG+/r8Aerq
        6wDAv8EAAAAAAAAAAAAAAAAAAAAAACAfIwMAAAAAAAAAPmZlaP/////7tbW2/wcFCtNgX2INAAAAUjIx
        NeqMi47/1NTV/vn5+f///////////v////7/////+fn5/8/P0P5+fYD/LCsv1hUUGJM8Oz69QD9D1xoZ
        Hd4XFhrdIyImgSYmKQAgHyMCIB8jAAAAAAAAAAAAIB8jAwAAAAAAAABEZ2Zp//////v08/T/iYiL/gkI
        DM1ZWFv26urq//////v+/v78/////v39/f75+fn/+Pj5//39/f7////8/v7++P////jb2tv/mJeZ/4WE
        hv9cW17/ZGNm/D08P/8YFxuUDQwQACAfIwMgHyMAAAAAAAAAAAAgHyMBeXl6AAAAAAAODRGzoqGj////
        //z/////tbW2/+rq6vz////9+/v7//39/f/8+/z//v7+/v////v////9/f39/+/v7//T09P/jY2P/0tK
        Tv8xMDT/FhUa/zw7Pv97en38TEtO/w0MEFgJCA0AIB8jAwAAAAAAAAAAAAAAACAfIwAcGx8BAAAAAAAA
        ABktLDDl4eHh//////3+/v79/f39/v7+/v/9/f3//f39//////z5+fn+urm7/3d2ef9PTlHyOjk82SEg
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIB8jACAfIwAlJCgAGBcbAUdGSgEjIiYEHx4iBCAf
        IwEgHyMAIB8jACAfIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHyMAIB8jACAfIwAgHyMBIB8jASAf
        IwAgHyMAIB8jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////oKAX/0qIRBcAECCbIIAEL0AAABNAA
        AATIAAAFyAAABMgAC+XIAJAF0AIF/9AEn//QCX//0An//5AV//+QI///ICf//6An//8gX///IK///6Zf
        //9Av///pf////////////////////////8=
</value>
  </data>
</root>